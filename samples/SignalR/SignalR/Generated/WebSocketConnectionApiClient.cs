// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace SignalR
{
    /// <summary> The WebSocketConnectionApi service client. </summary>
    public partial class WebSocketConnectionApiClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal WebSocketConnectionApiRestClient RestClient { get; }
        /// <summary> Initializes a new instance of WebSocketConnectionApiClient for mocking. </summary>
        protected WebSocketConnectionApiClient()
        {
        }
        /// <summary> Initializes a new instance of WebSocketConnectionApiClient. </summary>
        internal WebSocketConnectionApiClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "")
        {
            RestClient = new WebSocketConnectionApiRestClient(clientDiagnostics, pipeline, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Broadcast content inside request body to all the connected to endpoint &quot;/ws/client&quot;. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostDefaultHubBroadcastAsync(Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostDefaultHubBroadcastAsync(data, excluded, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Broadcast content inside request body to all the connected to endpoint &quot;/ws/client&quot;. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostDefaultHubBroadcast(Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PostDefaultHubBroadcast(data, excluded, cancellationToken);
        }

        /// <summary> Broadcast content inside request body to all the connected to endpoint &quot;/ws/client&quot;. </summary>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostDefaultHubBroadcastAsync(string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostDefaultHubBroadcastAsync(data, excluded, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Broadcast content inside request body to all the connected to endpoint &quot;/ws/client&quot;. </summary>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostDefaultHubBroadcast(string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PostDefaultHubBroadcast(data, excluded, cancellationToken);
        }

        /// <summary> Broadcast content inside request body to all the connected connections in the same hub. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostBroadcastAsync(string hub, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostBroadcastAsync(hub, data, excluded, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Broadcast content inside request body to all the connected connections in the same hub. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostBroadcast(string hub, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PostBroadcast(hub, data, excluded, cancellationToken);
        }

        /// <summary> Broadcast content inside request body to all the connected connections in the same hub. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostBroadcastAsync(string hub, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostBroadcastAsync(hub, data, excluded, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Broadcast content inside request body to all the connected connections in the same hub. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostBroadcast(string hub, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PostBroadcast(hub, data, excluded, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSendToDefaultHubUserAsync(string id, Stream data, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSendToDefaultHubUserAsync(id, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSendToDefaultHubUser(string id, Stream data, CancellationToken cancellationToken = default)
        {
            return RestClient.PostSendToDefaultHubUser(id, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSendToDefaultHubUserAsync(string id, string data, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSendToDefaultHubUserAsync(id, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSendToDefaultHubUser(string id, string data, CancellationToken cancellationToken = default)
        {
            return RestClient.PostSendToDefaultHubUser(id, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSendToUserAsync(string hub, string id, Stream data, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSendToUserAsync(hub, id, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSendToUser(string hub, string id, Stream data, CancellationToken cancellationToken = default)
        {
            return RestClient.PostSendToUser(hub, id, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSendToUserAsync(string hub, string id, string data, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSendToUserAsync(hub, id, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSendToUser(string hub, string id, string data, CancellationToken cancellationToken = default)
        {
            return RestClient.PostSendToUser(hub, id, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSendToDefaultHubConnectionAsync(string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSendToDefaultHubConnectionAsync(connectionId, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSendToDefaultHubConnection(string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            return RestClient.PostSendToDefaultHubConnection(connectionId, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSendToDefaultHubConnectionAsync(string connectionId, string data, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSendToDefaultHubConnectionAsync(connectionId, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSendToDefaultHubConnection(string connectionId, string data, CancellationToken cancellationToken = default)
        {
            return RestClient.PostSendToDefaultHubConnection(connectionId, data, cancellationToken);
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCheckDefaultHubConnectionExistenceAsync(string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetCheckDefaultHubConnectionExistenceAsync(connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCheckDefaultHubConnectionExistence(string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.GetCheckDefaultHubConnectionExistence(connectionId, cancellationToken);
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadCheckDefaultHubConnectionExistenceAsync(string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.HeadCheckDefaultHubConnectionExistenceAsync(connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadCheckDefaultHubConnectionExistence(string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.HeadCheckDefaultHubConnectionExistence(connectionId, cancellationToken);
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteCloseDefaultHubClientConnectionAsync(string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteCloseDefaultHubClientConnectionAsync(connectionId, reason, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteCloseDefaultHubClientConnection(string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteCloseDefaultHubClientConnection(connectionId, reason, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSendToConnectionAsync(string hub, string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSendToConnectionAsync(hub, connectionId, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSendToConnection(string hub, string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            return RestClient.PostSendToConnection(hub, connectionId, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSendToConnectionAsync(string hub, string connectionId, string data, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSendToConnectionAsync(hub, connectionId, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSendToConnection(string hub, string connectionId, string data, CancellationToken cancellationToken = default)
        {
            return RestClient.PostSendToConnection(hub, connectionId, data, cancellationToken);
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCheckConnectionExistenceAsync(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetCheckConnectionExistenceAsync(hub, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCheckConnectionExistence(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.GetCheckConnectionExistence(hub, connectionId, cancellationToken);
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadCheckConnectionExistenceAsync(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.HeadCheckConnectionExistenceAsync(hub, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadCheckConnectionExistence(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.HeadCheckConnectionExistence(hub, connectionId, cancellationToken);
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteCloseClientConnectionAsync(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteCloseClientConnectionAsync(hub, connectionId, reason, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteCloseClientConnection(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteCloseClientConnection(hub, connectionId, reason, cancellationToken);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostDefaultHubGroupBroadcastAsync(string group, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostDefaultHubGroupBroadcastAsync(group, data, excluded, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostDefaultHubGroupBroadcast(string group, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PostDefaultHubGroupBroadcast(group, data, excluded, cancellationToken);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostDefaultHubGroupBroadcastAsync(string group, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostDefaultHubGroupBroadcastAsync(group, data, excluded, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostDefaultHubGroupBroadcast(string group, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PostDefaultHubGroupBroadcast(group, data, excluded, cancellationToken);
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCheckDefaultHubGroupExistenceAsync(string group, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetCheckDefaultHubGroupExistenceAsync(group, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCheckDefaultHubGroupExistence(string group, CancellationToken cancellationToken = default)
        {
            return RestClient.GetCheckDefaultHubGroupExistence(group, cancellationToken);
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadCheckDefaultHubGroupExistenceAsync(string group, CancellationToken cancellationToken = default)
        {
            return await RestClient.HeadCheckDefaultHubGroupExistenceAsync(group, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadCheckDefaultHubGroupExistence(string group, CancellationToken cancellationToken = default)
        {
            return RestClient.HeadCheckDefaultHubGroupExistence(group, cancellationToken);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostGroupBroadcastAsync(string hub, string group, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostGroupBroadcastAsync(hub, group, data, excluded, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostGroupBroadcast(string hub, string group, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PostGroupBroadcast(hub, group, data, excluded, cancellationToken);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostGroupBroadcastAsync(string hub, string group, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PostGroupBroadcastAsync(hub, group, data, excluded, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostGroupBroadcast(string hub, string group, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PostGroupBroadcast(hub, group, data, excluded, cancellationToken);
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCheckGroupExistenceAsync(string hub, string group, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetCheckGroupExistenceAsync(hub, group, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCheckGroupExistence(string hub, string group, CancellationToken cancellationToken = default)
        {
            return RestClient.GetCheckGroupExistence(hub, group, cancellationToken);
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadCheckGroupExistenceAsync(string hub, string group, CancellationToken cancellationToken = default)
        {
            return await RestClient.HeadCheckGroupExistenceAsync(hub, group, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadCheckGroupExistence(string hub, string group, CancellationToken cancellationToken = default)
        {
            return RestClient.HeadCheckGroupExistence(hub, group, cancellationToken);
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCheckDefaultHubUserExistenceAsync(string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetCheckDefaultHubUserExistenceAsync(user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCheckDefaultHubUserExistence(string user, CancellationToken cancellationToken = default)
        {
            return RestClient.GetCheckDefaultHubUserExistence(user, cancellationToken);
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadCheckDefaultHubUserExistenceAsync(string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.HeadCheckDefaultHubUserExistenceAsync(user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadCheckDefaultHubUserExistence(string user, CancellationToken cancellationToken = default)
        {
            return RestClient.HeadCheckDefaultHubUserExistence(user, cancellationToken);
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutAddConnectionToDefaultHubGroupAsync(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.PutAddConnectionToDefaultHubGroupAsync(group, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutAddConnectionToDefaultHubGroup(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.PutAddConnectionToDefaultHubGroup(group, connectionId, cancellationToken);
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteRemoveConnectionFromDefaultHubGroupAsync(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteRemoveConnectionFromDefaultHubGroupAsync(group, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteRemoveConnectionFromDefaultHubGroup(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteRemoveConnectionFromDefaultHubGroup(group, connectionId, cancellationToken);
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCheckUserExistenceInDefaultHubGroupAsync(string group, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetCheckUserExistenceInDefaultHubGroupAsync(group, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCheckUserExistenceInDefaultHubGroup(string group, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.GetCheckUserExistenceInDefaultHubGroup(group, user, cancellationToken);
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadCheckUserExistenceInDefaultHubGroupAsync(string group, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.HeadCheckUserExistenceInDefaultHubGroupAsync(group, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadCheckUserExistenceInDefaultHubGroup(string group, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.HeadCheckUserExistenceInDefaultHubGroup(group, user, cancellationToken);
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutAddUserToDefaultHubGroupAsync(string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PutAddUserToDefaultHubGroupAsync(group, user, ttl, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutAddUserToDefaultHubGroup(string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PutAddUserToDefaultHubGroup(group, user, ttl, cancellationToken);
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteRemoveUserFromDefaultHubGroupAsync(string group, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteRemoveUserFromDefaultHubGroupAsync(group, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteRemoveUserFromDefaultHubGroup(string group, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteRemoveUserFromDefaultHubGroup(group, user, cancellationToken);
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteRemoveUserFromAllDefaultHubGroupsAsync(string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteRemoveUserFromAllDefaultHubGroupsAsync(user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteRemoveUserFromAllDefaultHubGroups(string user, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteRemoveUserFromAllDefaultHubGroups(user, cancellationToken);
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCheckUserExistenceAsync(string hub, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetCheckUserExistenceAsync(hub, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCheckUserExistence(string hub, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.GetCheckUserExistence(hub, user, cancellationToken);
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadCheckUserExistenceAsync(string hub, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.HeadCheckUserExistenceAsync(hub, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadCheckUserExistence(string hub, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.HeadCheckUserExistence(hub, user, cancellationToken);
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutAddConnectionToGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.PutAddConnectionToGroupAsync(hub, group, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutAddConnectionToGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.PutAddConnectionToGroup(hub, group, connectionId, cancellationToken);
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteRemoveConnectionFromGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteRemoveConnectionFromGroupAsync(hub, group, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteRemoveConnectionFromGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteRemoveConnectionFromGroup(hub, group, connectionId, cancellationToken);
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCheckUserExistenceInGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetCheckUserExistenceInGroupAsync(hub, group, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCheckUserExistenceInGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.GetCheckUserExistenceInGroup(hub, group, user, cancellationToken);
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadCheckUserExistenceInGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.HeadCheckUserExistenceInGroupAsync(hub, group, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadCheckUserExistenceInGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.HeadCheckUserExistenceInGroup(hub, group, user, cancellationToken);
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutAddUserToGroupAsync(string hub, string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.PutAddUserToGroupAsync(hub, group, user, ttl, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutAddUserToGroup(string hub, string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            return RestClient.PutAddUserToGroup(hub, group, user, ttl, cancellationToken);
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteRemoveUserFromGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteRemoveUserFromGroupAsync(hub, group, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteRemoveUserFromGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteRemoveUserFromGroup(hub, group, user, cancellationToken);
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteRemoveUserFromAllGroupsAsync(string hub, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.DeleteRemoveUserFromAllGroupsAsync(hub, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteRemoveUserFromAllGroups(string hub, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteRemoveUserFromAllGroups(hub, user, cancellationToken);
        }
    }
}
