// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Network.Management.Interface.Models
{
    public partial class RoutePropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (AddressPrefix != null)
            {
                writer.WritePropertyName("addressPrefix");
                writer.WriteStringValue(AddressPrefix);
            }
            writer.WritePropertyName("nextHopType");
            writer.WriteStringValue(NextHopType.ToString());
            if (NextHopIpAddress != null)
            {
                writer.WritePropertyName("nextHopIpAddress");
                writer.WriteStringValue(NextHopIpAddress);
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
        }
        internal static RoutePropertiesFormat DeserializeRoutePropertiesFormat(JsonElement element)
        {
            RoutePropertiesFormat result = new RoutePropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("addressPrefix"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AddressPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nextHopType"))
                {
                    result.NextHopType = new RouteNextHopType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("nextHopIpAddress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.NextHopIpAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
