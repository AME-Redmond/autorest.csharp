// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Network.Management.Interface.Models
{
    public partial class OutboundRulePropertiesFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (AllocatedOutboundPorts != null)
            {
                writer.WritePropertyName("allocatedOutboundPorts");
                writer.WriteNumberValue(AllocatedOutboundPorts.Value);
            }
            writer.WritePropertyName("frontendIPConfigurations");
            writer.WriteStartArray();
            foreach (var item in FrontendIPConfigurations)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("backendAddressPool");
            writer.WriteObjectValue(BackendAddressPool);
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WritePropertyName("protocol");
            writer.WriteStringValue(Protocol.ToString());
            if (EnableTcpReset != null)
            {
                writer.WritePropertyName("enableTcpReset");
                writer.WriteBooleanValue(EnableTcpReset.Value);
            }
            if (IdleTimeoutInMinutes != null)
            {
                writer.WritePropertyName("idleTimeoutInMinutes");
                writer.WriteNumberValue(IdleTimeoutInMinutes.Value);
            }
            writer.WriteEndObject();
        }
        internal static OutboundRulePropertiesFormat DeserializeOutboundRulePropertiesFormat(JsonElement element)
        {
            OutboundRulePropertiesFormat result = new OutboundRulePropertiesFormat();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("allocatedOutboundPorts"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AllocatedOutboundPorts = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("frontendIPConfigurations"))
                {
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.FrontendIPConfigurations.Add(SubResource.DeserializeSubResource(item));
                    }
                    continue;
                }
                if (property.NameEquals("backendAddressPool"))
                {
                    result.BackendAddressPool = SubResource.DeserializeSubResource(property.Value);
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("protocol"))
                {
                    result.Protocol = new LoadBalancerOutboundRuleProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableTcpReset"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.EnableTcpReset = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("idleTimeoutInMinutes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.IdleTimeoutInMinutes = property.Value.GetInt32();
                    continue;
                }
            }
            return result;
        }
    }
}
