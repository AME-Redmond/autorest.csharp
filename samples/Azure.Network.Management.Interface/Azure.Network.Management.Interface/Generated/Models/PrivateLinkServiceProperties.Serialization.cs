// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Network.Management.Interface.Models
{
    public partial class PrivateLinkServiceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (LoadBalancerFrontendIpConfigurations != null)
            {
                writer.WritePropertyName("loadBalancerFrontendIpConfigurations");
                writer.WriteStartArray();
                foreach (var item in LoadBalancerFrontendIpConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (IpConfigurations != null)
            {
                writer.WritePropertyName("ipConfigurations");
                writer.WriteStartArray();
                foreach (var item in IpConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (NetworkInterfaces != null)
            {
                writer.WritePropertyName("networkInterfaces");
                writer.WriteStartArray();
                foreach (var item in NetworkInterfaces)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (PrivateEndpointConnections != null)
            {
                writer.WritePropertyName("privateEndpointConnections");
                writer.WriteStartArray();
                foreach (var item in PrivateEndpointConnections)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Visibility != null)
            {
                writer.WritePropertyName("visibility");
                writer.WriteObjectValue(Visibility);
            }
            if (AutoApproval != null)
            {
                writer.WritePropertyName("autoApproval");
                writer.WriteObjectValue(AutoApproval);
            }
            if (Fqdns != null)
            {
                writer.WritePropertyName("fqdns");
                writer.WriteStartArray();
                foreach (var item in Fqdns)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Alias != null)
            {
                writer.WritePropertyName("alias");
                writer.WriteStringValue(Alias);
            }
            if (EnableProxyProtocol != null)
            {
                writer.WritePropertyName("enableProxyProtocol");
                writer.WriteBooleanValue(EnableProxyProtocol.Value);
            }
            writer.WriteEndObject();
        }
        internal static PrivateLinkServiceProperties DeserializePrivateLinkServiceProperties(JsonElement element)
        {
            PrivateLinkServiceProperties result = new PrivateLinkServiceProperties();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("loadBalancerFrontendIpConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.LoadBalancerFrontendIpConfigurations = new List<FrontendIPConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.LoadBalancerFrontendIpConfigurations.Add(FrontendIPConfiguration.DeserializeFrontendIPConfiguration(item));
                    }
                    continue;
                }
                if (property.NameEquals("ipConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.IpConfigurations = new List<PrivateLinkServiceIpConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.IpConfigurations.Add(PrivateLinkServiceIpConfiguration.DeserializePrivateLinkServiceIpConfiguration(item));
                    }
                    continue;
                }
                if (property.NameEquals("networkInterfaces"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.NetworkInterfaces = new List<NetworkInterface>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.NetworkInterfaces.Add(NetworkInterface.DeserializeNetworkInterface(item));
                    }
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.ProvisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateEndpointConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.PrivateEndpointConnections = new List<PrivateEndpointConnection>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.PrivateEndpointConnections.Add(PrivateEndpointConnection.DeserializePrivateEndpointConnection(item));
                    }
                    continue;
                }
                if (property.NameEquals("visibility"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Visibility = PrivateLinkServicePropertiesVisibility.DeserializePrivateLinkServicePropertiesVisibility(property.Value);
                    continue;
                }
                if (property.NameEquals("autoApproval"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AutoApproval = PrivateLinkServicePropertiesAutoApproval.DeserializePrivateLinkServicePropertiesAutoApproval(property.Value);
                    continue;
                }
                if (property.NameEquals("fqdns"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Fqdns = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.Fqdns.Add(item.GetString());
                    }
                    continue;
                }
                if (property.NameEquals("alias"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Alias = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableProxyProtocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.EnableProxyProtocol = property.Value.GetBoolean();
                    continue;
                }
            }
            return result;
        }
    }
}
