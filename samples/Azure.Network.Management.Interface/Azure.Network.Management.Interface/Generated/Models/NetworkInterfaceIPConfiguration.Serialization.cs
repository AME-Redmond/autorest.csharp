// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Network.Management.Interface.Models
{
    public partial class NetworkInterfaceIPConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Etag != null)
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(Etag);
            }
            if (Id != null)
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (VirtualNetworkTaps != null)
            {
                writer.WritePropertyName("virtualNetworkTaps");
                writer.WriteStartArray();
                foreach (var item in VirtualNetworkTaps)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ApplicationGatewayBackendAddressPools != null)
            {
                writer.WritePropertyName("applicationGatewayBackendAddressPools");
                writer.WriteStartArray();
                foreach (var item in ApplicationGatewayBackendAddressPools)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (LoadBalancerBackendAddressPools != null)
            {
                writer.WritePropertyName("loadBalancerBackendAddressPools");
                writer.WriteStartArray();
                foreach (var item in LoadBalancerBackendAddressPools)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (LoadBalancerInboundNatRules != null)
            {
                writer.WritePropertyName("loadBalancerInboundNatRules");
                writer.WriteStartArray();
                foreach (var item in LoadBalancerInboundNatRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (PrivateIPAddress != null)
            {
                writer.WritePropertyName("privateIPAddress");
                writer.WriteStringValue(PrivateIPAddress);
            }
            if (PrivateIPAllocationMethod != null)
            {
                writer.WritePropertyName("privateIPAllocationMethod");
                writer.WriteStringValue(PrivateIPAllocationMethod.Value.ToString());
            }
            if (PrivateIPAddressVersion != null)
            {
                writer.WritePropertyName("privateIPAddressVersion");
                writer.WriteStringValue(PrivateIPAddressVersion.Value.ToString());
            }
            if (Subnet != null)
            {
                writer.WritePropertyName("subnet");
                writer.WriteObjectValue(Subnet);
            }
            if (Primary != null)
            {
                writer.WritePropertyName("primary");
                writer.WriteBooleanValue(Primary.Value);
            }
            if (PublicIPAddress != null)
            {
                writer.WritePropertyName("publicIPAddress");
                writer.WriteObjectValue(PublicIPAddress);
            }
            if (ApplicationSecurityGroups != null)
            {
                writer.WritePropertyName("applicationSecurityGroups");
                writer.WriteStartArray();
                foreach (var item in ApplicationSecurityGroups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (PrivateLinkConnectionProperties != null)
            {
                writer.WritePropertyName("privateLinkConnectionProperties");
                writer.WriteObjectValue(PrivateLinkConnectionProperties);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static NetworkInterfaceIPConfiguration DeserializeNetworkInterfaceIPConfiguration(JsonElement element)
        {
            string name = default;
            string etag = default;
            string id = default;
            IList<VirtualNetworkTap> virtualNetworkTaps = default;
            IList<ApplicationGatewayBackendAddressPool> applicationGatewayBackendAddressPools = default;
            IList<BackendAddressPool> loadBalancerBackendAddressPools = default;
            IList<InboundNatRule> loadBalancerInboundNatRules = default;
            string privateIPAddress = default;
            IPAllocationMethod? privateIPAllocationMethod = default;
            IPVersion? privateIPAddressVersion = default;
            Subnet subnet = default;
            bool? primary = default;
            PublicIPAddress publicIPAddress = default;
            IList<ApplicationSecurityGroup> applicationSecurityGroups = default;
            ProvisioningState? provisioningState = default;
            NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties privateLinkConnectionProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        name = null;
                    }
                    else
                    {
                        name = property.Value.GetString();
                    }
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        etag = null;
                    }
                    else
                    {
                        etag = property.Value.GetString();
                    }
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        id = null;
                    }
                    else
                    {
                        id = property.Value.GetString();
                    }
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("virtualNetworkTaps"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                virtualNetworkTaps = null;
                            }
                            else
                            {
                                List<VirtualNetworkTap> array = new List<VirtualNetworkTap>();
                                foreach (var item in property0.Value.EnumerateArray())
                                {
                                    if (item.ValueKind == JsonValueKind.Null)
                                    {
                                        array.Add(null);
                                    }
                                    else
                                    {
                                        array.Add(VirtualNetworkTap.DeserializeVirtualNetworkTap(item));
                                    }
                                }
                                virtualNetworkTaps = array;
                            }
                            continue;
                        }
                        if (property0.NameEquals("applicationGatewayBackendAddressPools"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                applicationGatewayBackendAddressPools = null;
                            }
                            else
                            {
                                List<ApplicationGatewayBackendAddressPool> array = new List<ApplicationGatewayBackendAddressPool>();
                                foreach (var item in property0.Value.EnumerateArray())
                                {
                                    if (item.ValueKind == JsonValueKind.Null)
                                    {
                                        array.Add(null);
                                    }
                                    else
                                    {
                                        array.Add(ApplicationGatewayBackendAddressPool.DeserializeApplicationGatewayBackendAddressPool(item));
                                    }
                                }
                                applicationGatewayBackendAddressPools = array;
                            }
                            continue;
                        }
                        if (property0.NameEquals("loadBalancerBackendAddressPools"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                loadBalancerBackendAddressPools = null;
                            }
                            else
                            {
                                List<BackendAddressPool> array = new List<BackendAddressPool>();
                                foreach (var item in property0.Value.EnumerateArray())
                                {
                                    if (item.ValueKind == JsonValueKind.Null)
                                    {
                                        array.Add(null);
                                    }
                                    else
                                    {
                                        array.Add(BackendAddressPool.DeserializeBackendAddressPool(item));
                                    }
                                }
                                loadBalancerBackendAddressPools = array;
                            }
                            continue;
                        }
                        if (property0.NameEquals("loadBalancerInboundNatRules"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                loadBalancerInboundNatRules = null;
                            }
                            else
                            {
                                List<InboundNatRule> array = new List<InboundNatRule>();
                                foreach (var item in property0.Value.EnumerateArray())
                                {
                                    if (item.ValueKind == JsonValueKind.Null)
                                    {
                                        array.Add(null);
                                    }
                                    else
                                    {
                                        array.Add(InboundNatRule.DeserializeInboundNatRule(item));
                                    }
                                }
                                loadBalancerInboundNatRules = array;
                            }
                            continue;
                        }
                        if (property0.NameEquals("privateIPAddress"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                privateIPAddress = null;
                            }
                            else
                            {
                                privateIPAddress = property0.Value.GetString();
                            }
                            continue;
                        }
                        if (property0.NameEquals("privateIPAllocationMethod"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                privateIPAllocationMethod = null;
                            }
                            else
                            {
                                privateIPAllocationMethod = new IPAllocationMethod(property0.Value.GetString());
                            }
                            continue;
                        }
                        if (property0.NameEquals("privateIPAddressVersion"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                privateIPAddressVersion = null;
                            }
                            else
                            {
                                privateIPAddressVersion = new IPVersion(property0.Value.GetString());
                            }
                            continue;
                        }
                        if (property0.NameEquals("subnet"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                subnet = null;
                            }
                            else
                            {
                                subnet = Subnet.DeserializeSubnet(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("primary"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                primary = null;
                            }
                            else
                            {
                                primary = property0.Value.GetBoolean();
                            }
                            continue;
                        }
                        if (property0.NameEquals("publicIPAddress"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                publicIPAddress = null;
                            }
                            else
                            {
                                publicIPAddress = PublicIPAddress.DeserializePublicIPAddress(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("applicationSecurityGroups"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                applicationSecurityGroups = null;
                            }
                            else
                            {
                                List<ApplicationSecurityGroup> array = new List<ApplicationSecurityGroup>();
                                foreach (var item in property0.Value.EnumerateArray())
                                {
                                    if (item.ValueKind == JsonValueKind.Null)
                                    {
                                        array.Add(null);
                                    }
                                    else
                                    {
                                        array.Add(ApplicationSecurityGroup.DeserializeApplicationSecurityGroup(item));
                                    }
                                }
                                applicationSecurityGroups = array;
                            }
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                provisioningState = null;
                            }
                            else
                            {
                                provisioningState = new ProvisioningState(property0.Value.GetString());
                            }
                            continue;
                        }
                        if (property0.NameEquals("privateLinkConnectionProperties"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                privateLinkConnectionProperties = null;
                            }
                            else
                            {
                                privateLinkConnectionProperties = NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties.DeserializeNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties(property0.Value);
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new NetworkInterfaceIPConfiguration(id, name, etag, virtualNetworkTaps, applicationGatewayBackendAddressPools, loadBalancerBackendAddressPools, loadBalancerInboundNatRules, privateIPAddress, privateIPAllocationMethod, privateIPAddressVersion, subnet, primary, publicIPAddress, applicationSecurityGroups, provisioningState, privateLinkConnectionProperties);
        }
    }
}
