// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.MachineLearning
{
    /// <summary> Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet. </summary>
    public partial class MachineLearningComputeCreateOrUpdateOperation : Operation<ComputeResource>, IOperationSource<ComputeResourceData>
    {
        private readonly OperationInternals<ComputeResourceData> _operation;

        private readonly ResourceOperationsBase _operationBase;

        /// <summary> Initializes a new instance of MachineLearningComputeCreateOrUpdateOperation for mocking. </summary>
        protected MachineLearningComputeCreateOrUpdateOperation()
        {
        }

        internal MachineLearningComputeCreateOrUpdateOperation(ResourceOperationsBase operationsBase, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response)
        {
            _operation = new OperationInternals<ComputeResourceData>(this, clientDiagnostics, pipeline, request, response, OperationFinalStateVia.Location, "MachineLearningComputeCreateOrUpdateOperation");
            _operationBase = operationsBase;
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override ComputeResource Value => new ComputeResource(_operationBase, _operation.Value);

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public async override ValueTask<Response<ComputeResource>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => MapResponseType(await _operation.WaitForCompletionAsync(cancellationToken));

        /// <inheritdoc />
        public async override ValueTask<Response<ComputeResource>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => MapResponseType(await _operation.WaitForCompletionAsync(pollingInterval, cancellationToken));

        private Response<ComputeResource> MapResponseType(Response<ComputeResourceData> response) => Response.FromValue(new ComputeResource(_operationBase, response.Value), response.GetRawResponse());

        ComputeResourceData IOperationSource<ComputeResourceData>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            return ComputeResourceData.DeserializeComputeResourceData(document.RootElement);
        }

        async ValueTask<ComputeResourceData> IOperationSource<ComputeResourceData>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            return ComputeResourceData.DeserializeComputeResourceData(document.RootElement);
        }
    }
}
