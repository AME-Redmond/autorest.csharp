// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Storage.Management.Models
{
    public partial class StorageAccount : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Sku != null)
            {
                writer.WritePropertyName("sku");
                writer.WriteObjectValue(Sku);
            }
            if (Kind != null)
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind.Value.ToString());
            }
            if (Identity != null)
            {
                writer.WritePropertyName("identity");
                writer.WriteObjectValue(Identity);
            }
            if (Tags != null)
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            if (Id != null)
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Type != null)
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToSerialString());
            }
            if (PrimaryEndpoints != null)
            {
                writer.WritePropertyName("primaryEndpoints");
                writer.WriteObjectValue(PrimaryEndpoints);
            }
            if (PrimaryLocation != null)
            {
                writer.WritePropertyName("primaryLocation");
                writer.WriteStringValue(PrimaryLocation);
            }
            if (StatusOfPrimary != null)
            {
                writer.WritePropertyName("statusOfPrimary");
                writer.WriteStringValue(StatusOfPrimary.Value.ToSerialString());
            }
            if (LastGeoFailoverTime != null)
            {
                writer.WritePropertyName("lastGeoFailoverTime");
                writer.WriteStringValue(LastGeoFailoverTime.Value, "S");
            }
            if (SecondaryLocation != null)
            {
                writer.WritePropertyName("secondaryLocation");
                writer.WriteStringValue(SecondaryLocation);
            }
            if (StatusOfSecondary != null)
            {
                writer.WritePropertyName("statusOfSecondary");
                writer.WriteStringValue(StatusOfSecondary.Value.ToSerialString());
            }
            if (CreationTime != null)
            {
                writer.WritePropertyName("creationTime");
                writer.WriteStringValue(CreationTime.Value, "S");
            }
            if (CustomDomain != null)
            {
                writer.WritePropertyName("customDomain");
                writer.WriteObjectValue(CustomDomain);
            }
            if (SecondaryEndpoints != null)
            {
                writer.WritePropertyName("secondaryEndpoints");
                writer.WriteObjectValue(SecondaryEndpoints);
            }
            if (Encryption != null)
            {
                writer.WritePropertyName("encryption");
                writer.WriteObjectValue(Encryption);
            }
            if (AccessTier != null)
            {
                writer.WritePropertyName("accessTier");
                writer.WriteStringValue(AccessTier.Value.ToSerialString());
            }
            if (AzureFilesIdentityBasedAuthentication != null)
            {
                writer.WritePropertyName("azureFilesIdentityBasedAuthentication");
                writer.WriteObjectValue(AzureFilesIdentityBasedAuthentication);
            }
            if (EnableHttpsTrafficOnly != null)
            {
                writer.WritePropertyName("supportsHttpsTrafficOnly");
                writer.WriteBooleanValue(EnableHttpsTrafficOnly.Value);
            }
            if (NetworkRuleSet != null)
            {
                writer.WritePropertyName("networkAcls");
                writer.WriteObjectValue(NetworkRuleSet);
            }
            if (IsHnsEnabled != null)
            {
                writer.WritePropertyName("isHnsEnabled");
                writer.WriteBooleanValue(IsHnsEnabled.Value);
            }
            if (GeoReplicationStats != null)
            {
                writer.WritePropertyName("geoReplicationStats");
                writer.WriteObjectValue(GeoReplicationStats);
            }
            if (FailoverInProgress != null)
            {
                writer.WritePropertyName("failoverInProgress");
                writer.WriteBooleanValue(FailoverInProgress.Value);
            }
            if (LargeFileSharesState != null)
            {
                writer.WritePropertyName("largeFileSharesState");
                writer.WriteStringValue(LargeFileSharesState.Value.ToString());
            }
            if (PrivateEndpointConnections != null)
            {
                writer.WritePropertyName("privateEndpointConnections");
                writer.WriteStartArray();
                foreach (var item in PrivateEndpointConnections)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (RoutingPreference != null)
            {
                writer.WritePropertyName("routingPreference");
                writer.WriteObjectValue(RoutingPreference);
            }
            if (BlobRestoreStatus != null)
            {
                writer.WritePropertyName("blobRestoreStatus");
                writer.WriteObjectValue(BlobRestoreStatus);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static StorageAccount DeserializeStorageAccount(JsonElement element)
        {
            Sku sku = default;
            Kind? kind = default;
            Identity identity = default;
            IDictionary<string, string> tags = default;
            string location = default;
            string id = default;
            string name = default;
            string type = default;
            ProvisioningState? provisioningState = default;
            Endpoints primaryEndpoints = default;
            string primaryLocation = default;
            AccountStatus? statusOfPrimary = default;
            DateTimeOffset? lastGeoFailoverTime = default;
            string secondaryLocation = default;
            AccountStatus? statusOfSecondary = default;
            DateTimeOffset? creationTime = default;
            CustomDomain customDomain = default;
            Endpoints secondaryEndpoints = default;
            Encryption encryption = default;
            AccessTier? accessTier = default;
            AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication = default;
            bool? supportsHttpsTrafficOnly = default;
            NetworkRuleSet networkAcls = default;
            bool? isHnsEnabled = default;
            GeoReplicationStats geoReplicationStats = default;
            bool? failoverInProgress = default;
            LargeFileSharesState? largeFileSharesState = default;
            IList<PrivateEndpointConnection> privateEndpointConnections = default;
            RoutingPreference routingPreference = default;
            BlobRestoreStatus blobRestoreStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sku = null;
                    }
                    else
                    {
                        sku = Sku.DeserializeSku(property.Value);
                    }
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        kind = null;
                    }
                    else
                    {
                        kind = new Kind(property.Value.GetString());
                    }
                    continue;
                }
                if (property.NameEquals("identity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        identity = null;
                    }
                    else
                    {
                        identity = Identity.DeserializeIdentity(property.Value);
                    }
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tags = null;
                    }
                    else
                    {
                        Dictionary<string, string> dictionary = new Dictionary<string, string>();
                        foreach (var property0 in property.Value.EnumerateObject())
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                dictionary.Add(property0.Name, null);
                            }
                            else
                            {
                                dictionary.Add(property0.Name, property0.Value.GetString());
                            }
                        }
                        tags = dictionary;
                    }
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        id = null;
                    }
                    else
                    {
                        id = property.Value.GetString();
                    }
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        name = null;
                    }
                    else
                    {
                        name = property.Value.GetString();
                    }
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        type = null;
                    }
                    else
                    {
                        type = property.Value.GetString();
                    }
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                provisioningState = null;
                            }
                            else
                            {
                                provisioningState = property0.Value.GetString().ToProvisioningState();
                            }
                            continue;
                        }
                        if (property0.NameEquals("primaryEndpoints"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                primaryEndpoints = null;
                            }
                            else
                            {
                                primaryEndpoints = Endpoints.DeserializeEndpoints(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("primaryLocation"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                primaryLocation = null;
                            }
                            else
                            {
                                primaryLocation = property0.Value.GetString();
                            }
                            continue;
                        }
                        if (property0.NameEquals("statusOfPrimary"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                statusOfPrimary = null;
                            }
                            else
                            {
                                statusOfPrimary = property0.Value.GetString().ToAccountStatus();
                            }
                            continue;
                        }
                        if (property0.NameEquals("lastGeoFailoverTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                lastGeoFailoverTime = null;
                            }
                            else
                            {
                                lastGeoFailoverTime = property0.Value.GetDateTimeOffset("S");
                            }
                            continue;
                        }
                        if (property0.NameEquals("secondaryLocation"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                secondaryLocation = null;
                            }
                            else
                            {
                                secondaryLocation = property0.Value.GetString();
                            }
                            continue;
                        }
                        if (property0.NameEquals("statusOfSecondary"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                statusOfSecondary = null;
                            }
                            else
                            {
                                statusOfSecondary = property0.Value.GetString().ToAccountStatus();
                            }
                            continue;
                        }
                        if (property0.NameEquals("creationTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                creationTime = null;
                            }
                            else
                            {
                                creationTime = property0.Value.GetDateTimeOffset("S");
                            }
                            continue;
                        }
                        if (property0.NameEquals("customDomain"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                customDomain = null;
                            }
                            else
                            {
                                customDomain = CustomDomain.DeserializeCustomDomain(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("secondaryEndpoints"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                secondaryEndpoints = null;
                            }
                            else
                            {
                                secondaryEndpoints = Endpoints.DeserializeEndpoints(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("encryption"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                encryption = null;
                            }
                            else
                            {
                                encryption = Encryption.DeserializeEncryption(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("accessTier"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                accessTier = null;
                            }
                            else
                            {
                                accessTier = property0.Value.GetString().ToAccessTier();
                            }
                            continue;
                        }
                        if (property0.NameEquals("azureFilesIdentityBasedAuthentication"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                azureFilesIdentityBasedAuthentication = null;
                            }
                            else
                            {
                                azureFilesIdentityBasedAuthentication = AzureFilesIdentityBasedAuthentication.DeserializeAzureFilesIdentityBasedAuthentication(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("supportsHttpsTrafficOnly"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                supportsHttpsTrafficOnly = null;
                            }
                            else
                            {
                                supportsHttpsTrafficOnly = property0.Value.GetBoolean();
                            }
                            continue;
                        }
                        if (property0.NameEquals("networkAcls"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                networkAcls = null;
                            }
                            else
                            {
                                networkAcls = NetworkRuleSet.DeserializeNetworkRuleSet(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("isHnsEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                isHnsEnabled = null;
                            }
                            else
                            {
                                isHnsEnabled = property0.Value.GetBoolean();
                            }
                            continue;
                        }
                        if (property0.NameEquals("geoReplicationStats"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                geoReplicationStats = null;
                            }
                            else
                            {
                                geoReplicationStats = GeoReplicationStats.DeserializeGeoReplicationStats(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("failoverInProgress"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                failoverInProgress = null;
                            }
                            else
                            {
                                failoverInProgress = property0.Value.GetBoolean();
                            }
                            continue;
                        }
                        if (property0.NameEquals("largeFileSharesState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                largeFileSharesState = null;
                            }
                            else
                            {
                                largeFileSharesState = new LargeFileSharesState(property0.Value.GetString());
                            }
                            continue;
                        }
                        if (property0.NameEquals("privateEndpointConnections"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                privateEndpointConnections = null;
                            }
                            else
                            {
                                List<PrivateEndpointConnection> array = new List<PrivateEndpointConnection>();
                                foreach (var item in property0.Value.EnumerateArray())
                                {
                                    if (item.ValueKind == JsonValueKind.Null)
                                    {
                                        array.Add(null);
                                    }
                                    else
                                    {
                                        array.Add(PrivateEndpointConnection.DeserializePrivateEndpointConnection(item));
                                    }
                                }
                                privateEndpointConnections = array;
                            }
                            continue;
                        }
                        if (property0.NameEquals("routingPreference"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                routingPreference = null;
                            }
                            else
                            {
                                routingPreference = RoutingPreference.DeserializeRoutingPreference(property0.Value);
                            }
                            continue;
                        }
                        if (property0.NameEquals("blobRestoreStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                blobRestoreStatus = null;
                            }
                            else
                            {
                                blobRestoreStatus = BlobRestoreStatus.DeserializeBlobRestoreStatus(property0.Value);
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new StorageAccount(id, name, type, tags, location, sku, kind, identity, provisioningState, primaryEndpoints, primaryLocation, statusOfPrimary, lastGeoFailoverTime, secondaryLocation, statusOfSecondary, creationTime, customDomain, secondaryEndpoints, encryption, accessTier, azureFilesIdentityBasedAuthentication, supportsHttpsTrafficOnly, networkAcls, isHnsEnabled, geoReplicationStats, failoverInProgress, largeFileSharesState, privateEndpointConnections, routingPreference, blobRestoreStatus);
        }
    }
}
