//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.0.23.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace AutoRest.CSharp.V3.PipelineModels
{
    #pragma warning disable // Disable all warnings

    /// <summary>- since API version formats range from 
    /// Azure ARM API date style (2018-01-01) to semver (1.2.3) 
    /// and virtually any other text, this value tends to be an 
    /// opaque string with the possibility of a modifier to indicate
    /// that it is a range.
    /// 
    /// options: 
    /// - prepend a dash or append a plus to indicate a range 
    /// (ie, '2018-01-01+' or '-2019-01-01', or '1.0+' )
    /// 
    /// - semver-range style (ie, '^1.0.0' or '~1.0.0' )</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApiVersion 
    {
        /// <summary>the actual api version string used in the API</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; }

        public ApiVersionRange? Range { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a collection of api versions</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApiVersions : System.Collections.ObjectModel.Collection<ApiVersion>
    {
    }

    /// <summary>represents  deprecation information for a given aspect</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Deprecation 
    {
        /// <summary>the reason why this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>the api versions that this deprecation is applicable to.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; } = new System.Collections.ObjectModel.Collection<ApiVersion>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Extensions 
    {
        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>The Schema Object allows the definition of input and output data types.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Schema 
    {
        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public AllSchemaTypes Type { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a reference to external documentation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExternalDocumentation 
    {
        public string Description { get; set; }

        /// <summary>an URI</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>custom extensible metadata for individual language generators</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Languages 
    {
        [System.ComponentModel.DataAnnotations.Required]
        public Language Default { get; set; } = new Language();

        public CSharpLanguage Csharp { get; set; }

        public Language Python { get; set; }

        public Language Ruby { get; set; }

        public Language Go { get; set; }

        public Language Typescript { get; set; }

        public Language Javascript { get; set; }

        public Language Powershell { get; set; }

        public Language Java { get; set; }

        public Language C { get; set; }

        public Language Cpp { get; set; }

        public Language Swift { get; set; }

        public Language Objectivec { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>custom extensible metadata for individual protocols (ie, HTTP, etc)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Protocols 
    {
        public Protocol Http { get; set; }

        public Protocol Amqp { get; set; }

        public Protocol Mqtt { get; set; }

        public Protocol Jsonrpc { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>common pattern for Metadata on aspects</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Metadata 
    {
        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Language 
    {
        /// <summary>name used in actual implementation</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>description text - describes this node.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Protocol 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class XmlSerlializationFormat 
    {
        public string Name { get; set; }

        public string Namespace { get; set; }

        public string Prefix { get; set; }

        public bool Attribute { get; set; }

        public bool Wrapped { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>custom extensible metadata for individual serialization formats</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SerializationFormats 
    {
        public Extensions Json { get; set; }

        public XmlSerlializationFormat Xml { get; set; }

        public Extensions Protobuf { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>possible schema types that indicate the type of schema.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"array")]
        Array = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"byte-array")]
        ByteArray = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"choice")]
        Choice = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"constant")]
        Constant = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"dictionary")]
        Dictionary = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"flag")]
        Flag = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"not")]
        Not = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"object")]
        Object = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"odata-query")]
        OdataQuery = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"parameter-group")]
        ParameterGroup = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"sealed-choice")]
        SealedChoice = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"stream")]
        Stream = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"xor")]
        Xor = 27,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CompoundSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"xor")]
        Xor = 2,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PrimitiveSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 11,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ValueSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"array")]
        Array = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"byte-array")]
        ByteArray = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"choice")]
        Choice = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"flag")]
        Flag = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"sealed-choice")]
        SealedChoice = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 16,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ObjectSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dictionary")]
        Dictionary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"object")]
        Object = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 3,
    }

    /// <summary>all schema types</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AllSchemaTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"array")]
        Array = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"byte-array")]
        ByteArray = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"choice")]
        Choice = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"constant")]
        Constant = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"dictionary")]
        Dictionary = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"flag")]
        Flag = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"not")]
        Not = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"object")]
        Object = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"odata-query")]
        OdataQuery = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"parameter-group")]
        ParameterGroup = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"sealed-choice")]
        SealedChoice = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"xor")]
        Xor = 25,
    }

    /// <summary>Disciminator for polymorphic class hierarchy</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Discriminator 
    {
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyName { get; set; }

        public DictionaryOfString Mapping { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>common base interface for properties, parameters and the like.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Value 
    {
        /// <summary>the schema of this Value</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Schema { get; set; } = new Schema();

        /// <summary>if the value is marked 'required'.</summary>
        public bool? Required { get; set; }

        /// <summary>can null be passed in instead</summary>
        public bool? Nullable { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a property is a child value in an object</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Property 
    {
        /// <summary>if the property is marked read-only (ie, not intended to be sent to the service)</summary>
        public bool? ReadOnly { get; set; }

        /// <summary>the wire name of this property</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SerializedName { get; set; }

        /// <summary>the schema of this Value</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Schema { get; set; } = new Schema();

        /// <summary>if the value is marked 'required'.</summary>
        public bool? Required { get; set; }

        /// <summary>can null be passed in instead</summary>
        public bool? Nullable { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ImplementationLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Client")]
        Client = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Method")]
        Method = 1,
    }

    /// <summary>a definition of an discrete input for an operation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Parameter 
    {
        /// <summary>suggested implementation location for this parameter</summary>
        public ImplementationLocation? Implementation { get; set; }

        /// <summary>the schema of this Value</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Schema { get; set; } = new Schema();

        /// <summary>if the value is marked 'required'.</summary>
        public bool? Required { get; set; }

        /// <summary>can null be passed in instead</summary>
        public bool? Nullable { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>language metadata specific to schema instances</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaMetadata 
    {
        /// <summary>namespace of the implementation of this item</summary>
        public string Namespace { get; set; }

        /// <summary>if this is a child of a polymorphic class, this will have the value of the descriminator.</summary>
        public string DiscriminatorValue { get; set; }

        /// <summary>name used in actual implementation</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>description text - describes this node.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SerializationFormat 
    {
        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a Schema that represents a Number value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NumberSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public NumberSchemaType Type { get; set; }

        /// <summary>precision (# of bits?) of the number</summary>
        public double Precision { get; set; }

        /// <summary>if present, the number must be an exact multiple of this value</summary>
        public double? MultipleOf { get; set; }

        /// <summary>if present, the value must be lower than or equal to this (unless exclusiveMaximum is true)</summary>
        public double? Maximum { get; set; }

        /// <summary>if present, the value must be lower than maximum</summary>
        public bool? ExclusiveMaximum { get; set; }

        /// <summary>if present, the value must be highter than or equal to this (unless exclusiveMinimum is true)</summary>
        public double? Minimum { get; set; }

        /// <summary>if present, the value must be higher than minimum</summary>
        public bool? ExclusiveMinimum { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a Schema that represents a string value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StringSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public StringSchemaType Type { get; set; }

        /// <summary>the maximum length of the string</summary>
        public double? MaxLength { get; set; }

        /// <summary>the minimum length of the string</summary>
        public double? MinLength { get; set; }

        /// <summary>a regular expression that the string must be validated against</summary>
        public string Pattern { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a Schema that represents and array of values</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ArraySchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ArraySchemaType Type { get; set; }

        /// <summary>elementType of the array</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Schema ElementType { get; set; } = new Schema();

        /// <summary>maximum number of elements in the array</summary>
        public double? MaxItems { get; set; }

        /// <summary>minimum number of elements in the array</summary>
        public double? MinItems { get; set; }

        /// <summary>if the elements in the array should be unique</summary>
        public bool? UniqueItems { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a set of parameters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParameterGroupSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ParameterGroupSchemaType Type { get; set; }

        /// <summary>the collection of properties that are in this object</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Parameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<Parameter>();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a type with child properties.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ObjectSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ObjectSchemaType Type { get; set; }

        /// <summary>the definition of the polymorphic descriminator for this type</summary>
        public Discriminator Discriminator { get; set; }

        /// <summary>the collection of properties that are in this object</summary>
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        /// <summary>maximum number of properties permitted</summary>
        public double? MaxProperties { get; set; }

        /// <summary>minimum number of properties permitted</summary>
        public double? MinProperties { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>an individual choice in a ChoiceSchema</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChoiceValue 
    {
        /// <summary>per-language information for this value</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>the actual value</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public double Value { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a choice of several values (ie, an 'enum')</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChoiceSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ChoiceSchemaType Type { get; set; }

        /// <summary>the primitive type for the choices</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public StringSchema ChoiceType { get; set; } = new StringSchema();

        /// <summary>the possible choices for in the set</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ChoiceValue> Choices { get; set; } = new System.Collections.ObjectModel.Collection<ChoiceValue>();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a choice of several values (ie, an 'enum')</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SealedChoiceSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public SealedChoiceSchemaType Type { get; set; }

        /// <summary>the primitive type for the choices</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public StringSchema ChoiceType { get; set; } = new StringSchema();

        /// <summary>the possible choices for in the set</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ChoiceValue> Choices { get; set; } = new System.Collections.ObjectModel.Collection<ChoiceValue>();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FlagValue 
    {
        /// <summary>per-language information for this value</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        public double Value { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FlagSchema 
    {
        /// <summary>the possible choices for in the set</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlagValue> Choices { get; set; } = new System.Collections.ObjectModel.Collection<FlagValue>();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public AllSchemaTypes Type { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a container for the actual constant value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConstantValue 
    {
        /// <summary>per-language information for this value</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>the actual constant value to use</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a constant value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConstantSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ConstantSchemaType Type { get; set; }

        /// <summary>the schema type of the constant value (ie, StringSchema, NumberSchema, etc)</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public ConstantType ConstantSchema1 { get; set; } = new ConstantType();

        /// <summary>the actual constant value</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public ConstantValue Value { get; set; } = new ConstantValue();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a boolean value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BooleanSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public BooleanSchemaType Type { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a ODataQuery value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ODataQuerySchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ODataQuerySchemaType Type { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a Credential value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CredentialSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public CredentialSchemaType Type { get; set; }

        /// <summary>the maximum length of the string</summary>
        public double? MaxLength { get; set; }

        /// <summary>the minimum length of the string</summary>
        public double? MinLength { get; set; }

        /// <summary>a regular expression that the string must be validated against</summary>
        public string Pattern { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a Uri value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UriSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public UriSchemaType Type { get; set; }

        /// <summary>the maximum length of the string</summary>
        public double? MaxLength { get; set; }

        /// <summary>the minimum length of the string</summary>
        public double? MinLength { get; set; }

        /// <summary>a regular expression that the string must be validated against</summary>
        public string Pattern { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a Uuid value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UuidSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public UuidSchemaType Type { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a Duration value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DurationSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DurationSchemaType Type { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a DateTime value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DateTimeSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeSchemaType Type { get; set; }

        /// <summary>date-time format</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeSchemaFormat Format { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a Date value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DateSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateSchemaType Type { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a Char value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CharSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public CharSchemaType Type { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a ByteArray value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ByteArraySchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ByteArraySchemaType Type { get; set; }

        /// <summary>date-time format</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ByteArraySchemaFormat Format { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a UnixTime value</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UnixTimeSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public UnixTimeSchemaType Type { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a schema that represents a key-value collection</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionarySchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DictionarySchemaType Type { get; set; }

        /// <summary>the element type of the dictionary. (Keys are always strings)</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Schema ElementType { get; set; } = new Schema();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>an AND relationship between several schemas</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AndSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public AndSchemaType Type { get; set; }

        /// <summary>the set of schemas that this schema is composed of.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AllOf> AllOf { get; set; } = new System.Collections.ObjectModel.Collection<AllOf>();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>an OR relationship between several schemas</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OrSchema 
    {
        /// <summary>the set of schemas that this schema is composed of. Every schema is optional</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AnyOf> AnyOf { get; set; } = new System.Collections.ObjectModel.Collection<AnyOf>();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public AllSchemaTypes Type { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>an XOR relationship between several schemas</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class XorSchema 
    {
        /// <summary>the set of schemas that this must be one and only one of.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema> OneOf { get; set; } = new System.Collections.ObjectModel.Collection<Schema>();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public AllSchemaTypes Type { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a NOT relationship between schemas</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NotSchema 
    {
        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public NotSchemaType Type { get; set; }

        /// <summary>the schema that this may not be.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Not { get; set; } = new Schema();

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>the full set of schemas for a given service, categorized into convenient collections</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Schemas 
    {
        /// <summary>schemas that likely result in the creation of new objects during code generation</summary>
        public System.Collections.Generic.ICollection<ObjectSchema> Objects { get; set; }

        /// <summary>groups of parameters that can be built as an object</summary>
        public System.Collections.Generic.ICollection<ParameterGroupSchema> ParameterGroups { get; set; }

        /// <summary>schemas that construct more complex schemas based on compound construction (ie, allOf, oneOf, anyOf)</summary>
        public System.Collections.Generic.ICollection<OrSchema> OrCompounds { get; set; }

        public System.Collections.Generic.ICollection<AndSchema> AndCompounds { get; set; }

        public System.Collections.Generic.ICollection<XorSchema> XorCompounds { get; set; }

        /// <summary>schemas that represent a set of choices (ie, 'enum')</summary>
        public System.Collections.Generic.ICollection<ChoiceSchema> Choices { get; set; }

        /// <summary>schemas that represent a set of choices that are sealed -- that can never have items added to the definition.</summary>
        public System.Collections.Generic.ICollection<SealedChoiceSchema> SealedChoices { get; set; }

        public System.Collections.Generic.ICollection<FlagSchema> Flags { get; set; }

        /// <summary>schemas that represent key-value dictionaries used in the model.</summary>
        public System.Collections.Generic.ICollection<DictionarySchema> Dictionaries { get; set; }

        /// <summary>constant values that are used in models and parameters</summary>
        public System.Collections.Generic.ICollection<ConstantSchema> Constants { get; set; }

        /// <summary>primitive schemas that represent things that should be able to be represented without additional classes generated</summary>
        public System.Collections.Generic.ICollection<Primitives> Primitives { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompoundSchemas 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PrimitiveSchemas 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ObjectSchemas 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AllSchemas 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>contact information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Contact 
    {
        public string Name { get; set; }

        /// <summary>an URI</summary>
        public string Url { get; set; }

        public string Email { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>license information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class License 
    {
        /// <summary>the nameof the license</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>an uri pointing to the full license text</summary>
        public string Url { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>code model information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Info 
    {
        /// <summary>the title of this service.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>a text description of the service</summary>
        public string Description { get; set; }

        /// <summary>an uri to the terms of service specified to access the service</summary>
        public string TermsOfService { get; set; }

        /// <summary>contact information for the service</summary>
        public Contact Contact { get; set; }

        /// <summary>license information for th service</summary>
        public License License { get; set; }

        /// <summary>External Documentation</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a response from a service.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response 
    {
        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a response where the content should be treated as a stream instead of a value or object</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StreamResponse 
    {
        /// <summary>indicates that this response is a stream</summary>
        public bool Stream { get; set; }

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>a response that should be deserialized into a result of type(schema)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SchemaResponse 
    {
        /// <summary>the content returned by the service for a given operaiton</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Schema { get; set; } = new Schema();

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>represents a single callable endpoint with a discrete set of inputs, and any number of output possibilities (responses or exceptions)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Operation 
    {
        /// <summary>the inputs that are used to build the request.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Request Request { get; set; } = new Request();

        /// <summary>responses that indicate a successful call</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Response> Responses { get; set; } = new System.Collections.ObjectModel.Collection<Response>();

        /// <summary>responses that indicate a failed call</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Response> Exceptions { get; set; } = new System.Collections.ObjectModel.Collection<Response>();

        /// <summary>the apiVersion to use for a given profile name</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfApiVersion Profile { get; set; } = new DictionaryOfApiVersion();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Request 
    {
        /// <summary>the parameter inputs to the operation</summary>
        public System.Collections.Generic.ICollection<Parameter> Parameters { get; set; }

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>an operation group represents a container around set of operations</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OperationGroup 
    {
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Operation> Operations { get; set; } = new System.Collections.ObjectModel.Collection<Operation>();

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>example data [UNFINISHED]</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Example 
    {
        public string Summary { get; set; }

        public string Description { get; set; }

        public object Value { get; set; }

        /// <summary>an URI</summary>
        public string ExternalValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>The Serialization Style used for the parameter.
    /// 
    /// Describes how the parameter value will be serialized depending on the type of the parameter value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SerializationStyle
    {
        [System.Runtime.Serialization.EnumMember(Value = @"deepObject")]
        DeepObject = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"form")]
        Form = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"label")]
        Label = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"pipeDelimited")]
        PipeDelimited = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"simple")]
        Simple = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"spaceDelimited")]
        SpaceDelimited = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"xml")]
        Xml = 8,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum QueryEncodingStyle
    {
        [System.Runtime.Serialization.EnumMember(Value = @"deepObject")]
        DeepObject = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"form")]
        Form = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"pipeDelimited")]
        PipeDelimited = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"spaceDelimited")]
        SpaceDelimited = 3,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PathEncodingStyle
    {
        [System.Runtime.Serialization.EnumMember(Value = @"label")]
        Label = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"simple")]
        Simple = 2,
    }

    /// <summary>standard HTTP protocol methods</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum HttpMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delete")]
        Delete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"get")]
        Get = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"head")]
        Head = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"options")]
        Options = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"patch")]
        Patch = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"post")]
        Post = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"put")]
        Put = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"trace")]
        Trace = 7,
    }

    /// <summary>the location that this parameter is placed in the http request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParameterLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"body")]
        Body = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cookie")]
        Cookie = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"header")]
        Header = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"path")]
        Path = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"query")]
        Query = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 5,
    }

    /// <summary>A catch-all for all un-handled response codes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Default
    {
        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StatusCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"100")]
        _100 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"101")]
        _101 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"102")]
        _102 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"103")]
        _103 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"200")]
        _200 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"201")]
        _201 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"202")]
        _202 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"203")]
        _203 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"204")]
        _204 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"205")]
        _205 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"206")]
        _206 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"207")]
        _207 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"208")]
        _208 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"226")]
        _226 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"300")]
        _300 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"301")]
        _301 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"302")]
        _302 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"304")]
        _304 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"305")]
        _305 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"306")]
        _306 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"307")]
        _307 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"308")]
        _308 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"400")]
        _400 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"401")]
        _401 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"402")]
        _402 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"403")]
        _403 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"404")]
        _404 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"405")]
        _405 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"406")]
        _406 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"407")]
        _407 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"408")]
        _408 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"409")]
        _409 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"410")]
        _410 = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"411")]
        _411 = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"412")]
        _412 = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"413")]
        _413 = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"414")]
        _414 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"415")]
        _415 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"416")]
        _416 = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"417")]
        _417 = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"418")]
        _418 = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"421")]
        _421 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"422")]
        _422 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"423")]
        _423 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"424")]
        _424 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"425")]
        _425 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"426")]
        _426 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"428")]
        _428 = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"429")]
        _429 = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"431")]
        _431 = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"451")]
        _451 = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"500")]
        _500 = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"501")]
        _501 = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"502")]
        _502 = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"503")]
        _503 = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"504")]
        _504 = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"505")]
        _505 = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"506")]
        _506 = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"507")]
        _507 = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"508")]
        _508 = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"510")]
        _510 = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"511")]
        _511 = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 62,
    }

    /// <summary>An object representing a Server.
    /// 
    /// If the uri supports template substitution, then the variables are required.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpServer 
    {
        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>base url for the server</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>an optional collection of variables for server templating</summary>
        public System.Collections.Generic.ICollection<ServerVariable> Variables { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>An object representing a Server Variable for server URL template substitution.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ServerVariable 
    {
        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>the schema for the</summary>
        public Schema2 Schema { get; set; }

        /// <summary>The default value to use for substitution, which SHALL be sent if an alternate value is not supplied.</summary>
        public string Default { get; set; }

        /// <summary>if the value is marked 'required'.</summary>
        public bool? Required { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Scheme
    {
        [System.Runtime.Serialization.EnumMember(Value = @"bearer")]
        Bearer = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SecurityType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiKey")]
        ApiKey = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"http")]
        Http = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"oauth2")]
        Oauth2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"openIdConnect")]
        OpenIdConnect = 3,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AuthorizationCodeOAuthFlow 
    {
        /// <summary>an URI</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AuthorizationUrl { get; set; }

        /// <summary>an URI</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenUrl { get; set; }

        /// <summary>an URI</summary>
        public string RefreshUrl { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfString Scopes { get; set; } = new DictionaryOfString();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BearerHTTPSecurityScheme 
    {
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public BearerHTTPSecuritySchemeScheme Scheme { get; set; }

        public string BearerFormat { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public BearerHTTPSecuritySchemeType Type { get; set; }

        public string Description { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ClientCredentialsFlow 
    {
        /// <summary>an URI</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenUrl { get; set; }

        /// <summary>an URI</summary>
        public string RefreshUrl { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfString Scopes { get; set; } = new DictionaryOfString();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ImplicitOAuthFlow 
    {
        /// <summary>an URI</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AuthorizationUrl { get; set; }

        /// <summary>an URI</summary>
        public string RefreshUrl { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfString Scopes { get; set; } = new DictionaryOfString();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NonBearerHTTPSecurityScheme 
    {
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Scheme { get; set; }

        public string Description { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public NonBearerHTTPSecuritySchemeType Type { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OAuth2SecurityScheme 
    {
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public OAuth2SecuritySchemeType Type { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        public OAuthFlows Flows { get; set; } = new OAuthFlows();

        public string Description { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OAuthFlows 
    {
        public ImplicitOAuthFlow Implicit { get; set; }

        public PasswordOAuthFlow Password { get; set; }

        public ClientCredentialsFlow ClientCredentials { get; set; }

        public AuthorizationCodeOAuthFlow AuthorizationCode { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HTTPSecurityScheme 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SecurityScheme 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class APIKeySecurityScheme 
    {
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public APIKeySecuritySchemeType Type { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ParameterLocation In { get; set; }

        public string Description { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OpenIdConnectSecurityScheme 
    {
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public OpenIdConnectSecuritySchemeType Type { get; set; }

        /// <summary>an URI</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OpenIdConnectUrl { get; set; }

        public string Description { get; set; }

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PasswordOAuthFlow 
    {
        /// <summary>an URI</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TokenUrl { get; set; }

        /// <summary>an URI</summary>
        public string RefreshUrl { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        public DictionaryOfString Scopes { get; set; } = new DictionaryOfString();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>common ways of serializing simple parameters</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SecurityRequirement 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>extended metadata for HTTP operation parameters</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpParameter 
    {
        /// <summary>the location that this parameter is placed in the http request</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ParameterLocation In { get; set; }

        /// <summary>the Serialization Style used for the parameter.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public SerializationStyle Style { get; set; }

        /// <summary>when set, this indicates that the content of the parameter should not be subject to URI encoding rules.</summary>
        public bool? SkipUriEncoding { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>HTTP operation protocol data</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpRequest 
    {
        /// <summary>A relative path to an individual endpoint. 
        /// 
        /// The field name MUST begin with a slash. 
        /// The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
        /// Path templating is allowed. 
        /// 
        /// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>the HTTP Method used to process this operation</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public HttpMethod Method { get; set; }

        /// <summary>each method must have one or more servers that it is connected to.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpWithBodyRequest 
    {
        /// <summary>must set a media type for the body</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MediaType { get; set; }

        /// <summary>A relative path to an individual endpoint. 
        /// 
        /// The field name MUST begin with a slash. 
        /// The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
        /// Path templating is allowed. 
        /// 
        /// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>the HTTP Method used to process this operation</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public HttpMethod Method { get; set; }

        /// <summary>each method must have one or more servers that it is connected to.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpStreamRequest 
    {
        public bool Stream { get; set; }

        /// <summary>must set a media type for the body</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MediaType { get; set; }

        /// <summary>A relative path to an individual endpoint. 
        /// 
        /// The field name MUST begin with a slash. 
        /// The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
        /// Path templating is allowed. 
        /// 
        /// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>the HTTP Method used to process this operation</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public HttpMethod Method { get; set; }

        /// <summary>each method must have one or more servers that it is connected to.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpMultiPartRequest 
    {
        /// <summary>indicates that the HTTP Request should be a multipart request 
        /// 
        /// ie, that it has multiple requests in a single request.</summary>
        public bool Multipart { get; set; }

        /// <summary>the multiple request parts that make up this request ?? is this right?</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Request> Parts { get; set; } = new System.Collections.ObjectModel.Collection<Request>();

        /// <summary>must set a media type for the body</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MediaType { get; set; }

        /// <summary>A relative path to an individual endpoint. 
        /// 
        /// The field name MUST begin with a slash. 
        /// The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
        /// Path templating is allowed. 
        /// 
        /// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>the HTTP Method used to process this operation</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public HttpMethod Method { get; set; }

        /// <summary>each method must have one or more servers that it is connected to.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpMultipartRequest 
    {
        /// <summary>indicates that the HTTP Request should be a multipart request 
        /// 
        /// ie, that it has multiple requests in a single request.</summary>
        public bool Multipart { get; set; } = true;

        /// <summary>the multiple request parts that make up this request ?? is this right?</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Parts { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        /// <summary>must set a media type for the body</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MediaType { get; set; }

        /// <summary>A relative path to an individual endpoint. 
        /// 
        /// The field name MUST begin with a slash. 
        /// The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
        /// Path templating is allowed. 
        /// 
        /// When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>the HTTP Method used to process this operation</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public HttpMethod Method { get; set; }

        /// <summary>each method must have one or more servers that it is connected to.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpResponse 
    {
        /// <summary>the possible HTTP status codes that this response MUST match one of.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusCodes> StatusCodes { get; set; } = new System.Collections.ObjectModel.Collection<StatusCodes>();

        /// <summary>the possible media types that this response MUST match one of</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MediaTypes { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>content returned by the service in the HTTP headers</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema> Headers { get; set; } = new System.Collections.ObjectModel.Collection<Schema>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpStreamResponse 
    {
        /// <summary>stream responses</summary>
        public bool Stream { get; set; }

        /// <summary>the possible HTTP status codes that this response MUST match one of.</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusCodes2> StatusCodes { get; set; } = new System.Collections.ObjectModel.Collection<StatusCodes2>();

        /// <summary>the possible media types that this response MUST match one of</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MediaTypes { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>content returned by the service in the HTTP headers</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema> Headers { get; set; } = new System.Collections.ObjectModel.Collection<Schema>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>code model metadata for HTTP protocol</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HttpModel 
    {
        /// <summary>a collection of server definitions for the service</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<HttpServer> Servers { get; set; } = new System.Collections.ObjectModel.Collection<HttpServer>();

        /// <summary>a collection of security requirements for the service</summary>
        public System.Collections.Generic.ICollection<SecurityRequirement> Security { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryOfAny 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryOfString : System.Collections.Generic.Dictionary<string, string>
    {
    }

    /// <summary>custom extensible metadata for individual language generators</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LanguagesOfSchemaMetadata 
    {
        [System.ComponentModel.DataAnnotations.Required]
        public SchemaMetadata Default { get; set; } = new SchemaMetadata();

        public CSharpSchemaMetadata Csharp { get; set; }

        public SchemaMetadata Python { get; set; }

        public SchemaMetadata Ruby { get; set; }

        public SchemaMetadata Go { get; set; }

        public SchemaMetadata Typescript { get; set; }

        public SchemaMetadata Javascript { get; set; }

        public SchemaMetadata Powershell { get; set; }

        public SchemaMetadata Java { get; set; }

        public SchemaMetadata C { get; set; }

        public SchemaMetadata Cpp { get; set; }

        public SchemaMetadata Swift { get; set; }

        public SchemaMetadata Objectivec { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ChoiceType 
    {
        /// <summary>the schema type
        /// the schema type
        /// the schema type
        /// the schema type
        /// the schema type
        /// the schema type
        /// the schema type
        /// the schema type
        /// the schema type
        /// the schema type
        /// the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public ChoiceTypeType Type { get; set; }

        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConstantType 
    {
        /// <summary>per-language information for Schema uses SchemaMetadata</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public LanguagesOfSchemaMetadata Language { get; set; } = new LanguagesOfSchemaMetadata();

        /// <summary>the schema type</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public AllSchemaTypes Type { get; set; }

        /// <summary>a short description</summary>
        public string Summary { get; set; }

        /// <summary>example information</summary>
        public object Example { get; set; }

        /// <summary>If the value isn't sent on the wire, the service will assume this</summary>
        public object DefaultValue { get; set; }

        /// <summary>per-serialization information for this Schema</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public SerializationFormats Serialization { get; set; } = new SerializationFormats();

        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uid { get; set; }

        /// <summary>common name of the aspect -- in OAI3 this was typically the key in the parent dictionary</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>description of the aspect.</summary>
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>API versions that this applies to. Undefined means all versions</summary>
        public System.Collections.Generic.ICollection<ApiVersion> ApiVersions { get; set; }

        /// <summary>deprecation information -- ie, when this aspect doesn't apply and why</summary>
        public Deprecation Deprecated { get; set; }

        /// <summary>External Documentation Links</summary>
        public ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DictionaryOfApiVersion : System.Collections.Generic.Dictionary<string, ApiVersion>
    {
    }

    /// <summary>the model that contains all the information required to generate a service api</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CodeModel 
    {
        /// <summary>Code model information</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Info Info { get; set; } = new Info();

        /// <summary>All schemas for the model</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Schemas Schemas { get; set; } = new Schemas();

        /// <summary>All operations</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationGroup> OperationGroups { get; set; } = new System.Collections.ObjectModel.Collection<OperationGroup>();

        /// <summary>all global parameters (ie, ImplementationLocation = client )</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Parameter> GlobalParameters { get; set; } = new System.Collections.ObjectModel.Collection<Parameter>();

        /// <summary>per-language information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Languages Language { get; set; } = new Languages();

        /// <summary>per-protocol information for this aspect</summary>
        [System.ComponentModel.DataAnnotations.Required]
        public Protocols Protocol { get; set; } = new Protocols();

        /// <summary>additional metadata extensions dictionary</summary>
        public DictionaryOfAny Extensions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ApiVersionRange
    {
        [System.Runtime.Serialization.EnumMember(Value = @"+")]
        Plus = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-")]
        Minus = 1,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum NumberSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 1,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StringSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ArraySchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"array")]
        Array = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParameterGroupSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"parameter-group")]
        ParameterGroup = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ObjectSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"object")]
        Object = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ChoiceSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"choice")]
        Choice = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SealedChoiceSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"sealed-choice")]
        SealedChoice = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ConstantSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"constant")]
        Constant = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BooleanSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ODataQuerySchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"odata-query")]
        OdataQuery = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CredentialSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UriSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UuidSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DurationSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DateTimeSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DateTimeSchemaFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time-rfc1123")]
        DateTimeRfc1123 = 1,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DateSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CharSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ByteArraySchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"byte-array")]
        ByteArray = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ByteArraySchemaFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"base64url")]
        Base64url = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"byte")]
        Byte = 1,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UnixTimeSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DictionarySchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"dictionary")]
        Dictionary = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AndSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AllOf 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AnyOf 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum NotSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"not")]
        Not = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Primitives 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Schema2 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BearerHTTPSecuritySchemeScheme
    {
        [System.Runtime.Serialization.EnumMember(Value = @"bearer")]
        Bearer = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BearerHTTPSecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"http")]
        Http = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum NonBearerHTTPSecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"http")]
        Http = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OAuth2SecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"oauth2")]
        Oauth2 = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum APIKeySecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"apiKey")]
        ApiKey = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OpenIdConnectSecuritySchemeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"openIdConnect")]
        OpenIdConnect = 0,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StatusCodes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"100")]
        _100 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"101")]
        _101 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"102")]
        _102 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"103")]
        _103 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"200")]
        _200 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"201")]
        _201 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"202")]
        _202 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"203")]
        _203 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"204")]
        _204 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"205")]
        _205 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"206")]
        _206 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"207")]
        _207 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"208")]
        _208 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"226")]
        _226 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"300")]
        _300 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"301")]
        _301 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"302")]
        _302 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"304")]
        _304 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"305")]
        _305 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"306")]
        _306 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"307")]
        _307 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"308")]
        _308 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"400")]
        _400 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"401")]
        _401 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"402")]
        _402 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"403")]
        _403 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"404")]
        _404 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"405")]
        _405 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"406")]
        _406 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"407")]
        _407 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"408")]
        _408 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"409")]
        _409 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"410")]
        _410 = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"411")]
        _411 = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"412")]
        _412 = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"413")]
        _413 = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"414")]
        _414 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"415")]
        _415 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"416")]
        _416 = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"417")]
        _417 = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"418")]
        _418 = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"421")]
        _421 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"422")]
        _422 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"423")]
        _423 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"424")]
        _424 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"425")]
        _425 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"426")]
        _426 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"428")]
        _428 = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"429")]
        _429 = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"431")]
        _431 = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"451")]
        _451 = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"500")]
        _500 = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"501")]
        _501 = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"502")]
        _502 = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"503")]
        _503 = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"504")]
        _504 = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"505")]
        _505 = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"506")]
        _506 = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"507")]
        _507 = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"508")]
        _508 = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"510")]
        _510 = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"511")]
        _511 = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 62,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StatusCodes2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"100")]
        _100 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"101")]
        _101 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"102")]
        _102 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"103")]
        _103 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"200")]
        _200 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"201")]
        _201 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"202")]
        _202 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"203")]
        _203 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"204")]
        _204 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"205")]
        _205 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"206")]
        _206 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"207")]
        _207 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"208")]
        _208 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"226")]
        _226 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"300")]
        _300 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"301")]
        _301 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"302")]
        _302 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"304")]
        _304 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"305")]
        _305 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"306")]
        _306 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"307")]
        _307 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"308")]
        _308 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"400")]
        _400 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"401")]
        _401 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"402")]
        _402 = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"403")]
        _403 = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"404")]
        _404 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"405")]
        _405 = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"406")]
        _406 = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"407")]
        _407 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"408")]
        _408 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"409")]
        _409 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"410")]
        _410 = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"411")]
        _411 = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"412")]
        _412 = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"413")]
        _413 = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"414")]
        _414 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"415")]
        _415 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"416")]
        _416 = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"417")]
        _417 = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"418")]
        _418 = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"421")]
        _421 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"422")]
        _422 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"423")]
        _423 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"424")]
        _424 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"425")]
        _425 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"426")]
        _426 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"428")]
        _428 = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"429")]
        _429 = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"431")]
        _431 = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"451")]
        _451 = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"500")]
        _500 = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"501")]
        _501 = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"502")]
        _502 = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"503")]
        _503 = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"504")]
        _504 = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"505")]
        _505 = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"506")]
        _506 = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"507")]
        _507 = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"508")]
        _508 = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"510")]
        _510 = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"511")]
        _511 = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 62,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ChoiceTypeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
        Boolean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"char")]
        Char = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"credential")]
        Credential = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"date-time")]
        DateTime = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"duration")]
        Duration = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"integer")]
        Integer = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"uri")]
        Uri = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"uuid")]
        Uuid = 11,
    }
}