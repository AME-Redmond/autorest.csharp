// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace required_optional
{
    internal partial class ImplicitRestClient
    {
        private string requiredGlobalPath;
        private string requiredGlobalQuery;
        private string host;
        private int? optionalGlobalQuery;
        private ClientDiagnostics clientDiagnostics;
        private HttpPipeline pipeline;

        /// <summary> Initializes a new instance of ImplicitRestClient. </summary>
        public ImplicitRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string requiredGlobalPath, string requiredGlobalQuery, string host = "http://localhost:3000", int? optionalGlobalQuery = null)
        {
            if (requiredGlobalPath == null)
            {
                throw new ArgumentNullException(nameof(requiredGlobalPath));
            }
            if (requiredGlobalQuery == null)
            {
                throw new ArgumentNullException(nameof(requiredGlobalQuery));
            }
            if (host == null)
            {
                throw new ArgumentNullException(nameof(host));
            }

            this.requiredGlobalPath = requiredGlobalPath;
            this.requiredGlobalQuery = requiredGlobalQuery;
            this.host = host;
            this.optionalGlobalQuery = optionalGlobalQuery;
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        internal HttpMessage CreateGetRequiredPathRequest(string pathParameter)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/reqopt/implicit/required/path/", false);
            uri.AppendPath(pathParameter, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Test implicitly required path parameter. </summary>
        /// <param name="pathParameter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetRequiredPathAsync(string pathParameter, CancellationToken cancellationToken = default)
        {
            if (pathParameter == null)
            {
                throw new ArgumentNullException(nameof(pathParameter));
            }

            using var scope = clientDiagnostics.CreateScope("ImplicitClient.GetRequiredPath");
            scope.Start();
            try
            {
                using var message = CreateGetRequiredPathRequest(pathParameter);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test implicitly required path parameter. </summary>
        /// <param name="pathParameter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetRequiredPath(string pathParameter, CancellationToken cancellationToken = default)
        {
            if (pathParameter == null)
            {
                throw new ArgumentNullException(nameof(pathParameter));
            }

            using var scope = clientDiagnostics.CreateScope("ImplicitClient.GetRequiredPath");
            scope.Start();
            try
            {
                using var message = CreateGetRequiredPathRequest(pathParameter);
                pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreatePutOptionalQueryRequest(string queryParameter)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/reqopt/implicit/optional/query", false);
            if (queryParameter != null)
            {
                uri.AppendQuery("queryParameter", queryParameter, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Test implicitly optional query parameter. </summary>
        /// <param name="queryParameter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PutOptionalQueryAsync(string queryParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.PutOptionalQuery");
            scope.Start();
            try
            {
                using var message = CreatePutOptionalQueryRequest(queryParameter);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test implicitly optional query parameter. </summary>
        /// <param name="queryParameter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutOptionalQuery(string queryParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.PutOptionalQuery");
            scope.Start();
            try
            {
                using var message = CreatePutOptionalQueryRequest(queryParameter);
                pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreatePutOptionalHeaderRequest(string queryParameter)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/reqopt/implicit/optional/header", false);
            request.Uri = uri;
            if (queryParameter != null)
            {
                request.Headers.Add("queryParameter", queryParameter);
            }
            return message;
        }

        /// <summary> Test implicitly optional header parameter. </summary>
        /// <param name="queryParameter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PutOptionalHeaderAsync(string queryParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.PutOptionalHeader");
            scope.Start();
            try
            {
                using var message = CreatePutOptionalHeaderRequest(queryParameter);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test implicitly optional header parameter. </summary>
        /// <param name="queryParameter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutOptionalHeader(string queryParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.PutOptionalHeader");
            scope.Start();
            try
            {
                using var message = CreatePutOptionalHeaderRequest(queryParameter);
                pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreatePutOptionalBodyRequest(string bodyParameter)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/reqopt/implicit/optional/body", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (bodyParameter != null)
            {
                using var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteStringValue(bodyParameter);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Test implicitly optional body parameter. </summary>
        /// <param name="bodyParameter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PutOptionalBodyAsync(string bodyParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.PutOptionalBody");
            scope.Start();
            try
            {
                using var message = CreatePutOptionalBodyRequest(bodyParameter);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test implicitly optional body parameter. </summary>
        /// <param name="bodyParameter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutOptionalBody(string bodyParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.PutOptionalBody");
            scope.Start();
            try
            {
                using var message = CreatePutOptionalBodyRequest(bodyParameter);
                pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetRequiredGlobalPathRequest()
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/reqopt/global/required/path/", false);
            uri.AppendPath(requiredGlobalPath, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Test implicitly required path parameter. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetRequiredGlobalPathAsync(CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.GetRequiredGlobalPath");
            scope.Start();
            try
            {
                using var message = CreateGetRequiredGlobalPathRequest();
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test implicitly required path parameter. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetRequiredGlobalPath(CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.GetRequiredGlobalPath");
            scope.Start();
            try
            {
                using var message = CreateGetRequiredGlobalPathRequest();
                pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetRequiredGlobalQueryRequest()
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/reqopt/global/required/query", false);
            uri.AppendQuery("required-global-query", requiredGlobalQuery, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Test implicitly required query parameter. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetRequiredGlobalQueryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.GetRequiredGlobalQuery");
            scope.Start();
            try
            {
                using var message = CreateGetRequiredGlobalQueryRequest();
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test implicitly required query parameter. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetRequiredGlobalQuery(CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.GetRequiredGlobalQuery");
            scope.Start();
            try
            {
                using var message = CreateGetRequiredGlobalQueryRequest();
                pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetOptionalGlobalQueryRequest()
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/reqopt/global/optional/query", false);
            if (optionalGlobalQuery != null)
            {
                uri.AppendQuery("optional-global-query", optionalGlobalQuery.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Test implicitly optional query parameter. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetOptionalGlobalQueryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.GetOptionalGlobalQuery");
            scope.Start();
            try
            {
                using var message = CreateGetOptionalGlobalQueryRequest();
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test implicitly optional query parameter. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetOptionalGlobalQuery(CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ImplicitClient.GetOptionalGlobalQuery");
            scope.Start();
            try
            {
                using var message = CreateGetOptionalGlobalQueryRequest();
                pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
