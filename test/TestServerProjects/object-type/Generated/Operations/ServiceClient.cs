// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace object_type
{
    public partial class ServiceClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ServiceRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient()
        {
        }
        /// <summary> Initializes a new instance of ServiceClient. </summary>
        internal ServiceClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "http://localhost:3000")
        {
            RestClient = new ServiceRestClient(clientDiagnostics, pipeline, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Basic get that returns an object. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Basic get that returns an object. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> Get(CancellationToken cancellationToken = default)
        {
            return RestClient.Get(cancellationToken);
        }

        /// <summary> Basic put that puts an object. </summary>
        /// <param name="putObject"> The any to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutAsync(object putObject, CancellationToken cancellationToken = default)
        {
            return await RestClient.PutAsync(putObject, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Basic put that puts an object. </summary>
        /// <param name="putObject"> The any to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Put(object putObject, CancellationToken cancellationToken = default)
        {
            return RestClient.Put(putObject, cancellationToken);
        }
    }
}
