// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace NameConflicts.Models
{
    /// <summary> The MyEnumValue. </summary>
    public readonly partial struct MyEnumValue : IEquatable<MyEnumValue>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MyEnumValue"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MyEnumValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MyEnum_Value = "MyEnum";
        private const string SecondEnumValueValue = "SecondEnumValue";

        /// <summary> MyEnum. </summary>
        public static MyEnumValue MyEnum { get; } = new MyEnumValue(MyEnum_Value);
        /// <summary> SecondEnumValue. </summary>
        public static MyEnumValue SecondEnumValue { get; } = new MyEnumValue(SecondEnumValueValue);
        /// <summary> Determines if two <see cref="MyEnumValue"/> values are the same. </summary>
        public static bool operator ==(MyEnumValue left, MyEnumValue right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MyEnumValue"/> values are not the same. </summary>
        public static bool operator !=(MyEnumValue left, MyEnumValue right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MyEnumValue"/>. </summary>
        public static implicit operator MyEnumValue(string value) => new MyEnumValue(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MyEnumValue other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MyEnumValue other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
